apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'

ext.junitVersion = '5.4.0-M1'

repositories {
    mavenLocal()
    mavenCentral()
}

compileJava {
    sourceCompatibility = 8
    targetCompatibility = 8
    options.encoding = 'UTF-8'
    options.compilerArgs = [ '-Xlint:all', '-Werror' ]
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled = true
    }
}

check.dependsOn jacocoTestReport

task createPom {
    doLast {
        pom {
            project {
                name = project.name
                description = "Vavr is an object-functional library for Java 8+"
                url = 'https://www.vavr.io'
                inceptionYear '2014'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        name = 'Daniel Dietrich'
                        email = 'cafebab3@gmail.com'
                        organization = 'Vavr'
                        organizationUrl = 'https://github.com/vavr-io'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/vavr-io/vavr.git'
                    developerConnection = 'scm:git:https://github.com/vavr-io/vavr.git'
                    url = 'https://github.com/vavr-io/vavr/tree/master'
                }
            }
        }.writeTo("$mavenPomDir/pom.xml") // mavenPomDir is used by the uploadArchives task
    }
}

jar {
    manifest {
        attributes('Automatic-Module-Name': 'io.vavr')
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task testSourcesJar(type: Jar) {
    from sourceSets.test.allSource
    classifier = 'test-sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

artifacts {
    archives javadocJar, sourcesJar, testSourcesJar
}

// Requirements:
//
// - Get public key ID `gpg --list-keys --keyid-format SHORT`
// - Export key `gpg --keyring secring.gpg --export-secret-keys > ~/.gnupg/secring.gpg`
// - Add the following properties to ~/.gradle/gradle.properties
//      signing.keyId=0ABCDEF
//      signing.password=password
//      signing.secretKeyRingFile=/absolute/path/to/.gnupg/secring.gpg
//
signing {
    required { !version.endsWith("-SNAPSHOT") }
    sign configurations.archives
}

// Requirements:
//
// - Add the following properties to ~/.gradle/gradle.properties
//     ossrhUsername=<username>
//     ossrhPassword=<password>
//
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
        }
    }
}
